#ifndef LIGHTING_H
#define LIGHTING_H

#include "ViewProj.glh"

layout(binding=1, std140) uniform ShadowMatrixUB
{
	mat4 shadowMatrix;
};

layout(binding=3) uniform sampler2DShadow shadowMap;

const vec3 dlDirection = normalize(vec3(0.5, -0.75, 1));
const vec3 diffuseColor = vec3(1, 1, 1) * 0.4;

float getShadowFactor(vec3 worldPos)
{
	vec2 texelSize = 1.0 / vec2(textureSize(shadowMap, 0));
	
	const float BIAS = 1E-4;
	
	vec4 coords4 = shadowMatrix * vec4(worldPos, 1.0);
	vec3 coords = (coords4.xyz / coords4.w) * 0.5 + 0.5;
	float compare = coords.z - BIAS;
	
	if (coords.z < 0 || coords.z > 1)
		return 1;
	
	const int QUALITY = 2;
	
	float shadowFactor = 0;
	for (int x = -QUALITY; x <= QUALITY; x++)
	{
		for (int y = -QUALITY; y <= QUALITY; y++)
		{
			vec2 oSampleCoords = coords.xy + vec2(x, y) * texelSize;
			shadowFactor += texture(shadowMap, vec3(oSampleCoords, compare)).r;
		}
	}
	
	return shadowFactor / ((QUALITY * 2 + 1) * (QUALITY * 2 + 1));
}

vec3 calcLighting(vec3 color, vec3 normal, vec3 worldPos, float specularIntensity, float specularExponent)
{
	float factor = dot(normal, -dlDirection) * getShadowFactor(worldPos);
	
	vec3 lighting = vec3(0.06) * color;
	
	if (factor > 0)
	{
		lighting += color * diffuseColor * factor;
		
		vec3 dirToEye = normalize(cameraPosition - worldPos);
		vec3 reflectDir = reflect(dlDirection, normal);
		
		float specFactor = pow(dot(dirToEye, reflectDir), specularExponent);
		
		if (specFactor > 0)
		{
			lighting += color * specularIntensity * specFactor;
		}
	}
	
	return lighting;
}

#endif